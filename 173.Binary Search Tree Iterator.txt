/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/*
//We can use stack to store all the value in the tree. Since next() function is used to return the next smallest number in BST, we have to put large number in stack first. Reverse the inorder traversal.
//but this solution will take O(n) space complexicity.
public class BSTIterator {
    Deque<Integer> stack;

    public BSTIterator(TreeNode root) {
        stack = new LinkedList<Integer>();
        iterate(root,stack);
    }
    
    private void iterate(TreeNode root, Deque<Integer> stack){
        if(root == null){
            return;
        }
        if(root.right != null){
            iterate(root.right, stack);
        }
        stack.offerLast(root.val);
        if(root.left != null){
            iterate(root.left, stack);
        }

       

    }

   
    public boolean hasNext() {
        if(stack.size() != 0) return true;
        else return false;
    }

   
    public int next() {
        return stack.pollLast();
    }
}
*/

//In order to only use O(h) memory, we cannot put all the treenode in to stack at one time. Since next() function is used to return the next smallest number in BST, we have to put the lfet branch first. After return the value of one parent node, we have to traverse the letf branch of the right child node to make sure that the next smallest number is in the stack. 
public class BSTIterator {
Stack<TreeNode> stack;
public BSTIterator(TreeNode root) {
    stack = new Stack();
    TreeNode cur = root;
    while(cur != null){
        stack.push(cur);
        cur = cur.left;
    }
}

/** @return whether we have a next smallest number */
public boolean hasNext() {
    return !stack.isEmpty();        
}

/** @return the next smallest number */
public int next() {
    TreeNode tmp = stack.pop();
    TreeNode cur = tmp.right;
    while(cur != null){
        stack.push(cur);
        cur = cur.left;
    }
    return tmp.val;
}
}
