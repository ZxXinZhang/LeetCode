//We should consider overflow cases.
//When "result" is too big, the "newResult" value stored in memory is less than the pure maths' version, thus "(newResult - tail) / 10" can not go back to "result".

public class Solution {
    public int reverse(int x)
    {
        int tail = 0;
        if(x == 0) return 0;
        int n = x, result = 0;
        int newresult = 0;
        while(n != 0)
        {
            tail = n % 10;
            newresult = result * 10 + tail;
            if((newresult - tail) / 10 != result)  //If overflow exists, the new result will not equal previous one.
            {return 0;}
            result = newresult;
            n = n / 10;
        }
        return result;
    }
}

