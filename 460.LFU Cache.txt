//Two HashMaps are used, one to store <key, value> pair, another store the <key, node>.
//double linked list to keep the frequent of each key. In each double linked list node, keys with the same count are saved using java built in LinkedHashSet. This can keep the order.
//Every time, one key is referenced, first find the current node corresponding to the key, If the following node exist and the frequent is larger by one, add key to the keys of the following node, else create a new node and add it following the current node.
//All operations are guaranteed to be O(1).
public class LFUCache {
    
    class Node{
        public Node pre, next;
        public final int count;
        public LinkedHashSet<Integer> keys = new LinkedHashSet<>();
        
        public Node(Node pre, Node next, int count, int key){
            this.pre = pre;
            this.next = next;
            this.count = count;
            keys.add(key);
        }
    }
    
    Node head = null;
    final int capacity;
    Map<Integer, Integer> valueMap;
    Map<Integer, Node> nodeMap;
    
    public LFUCache(int capacity) {
        this.capacity = capacity;
        valueMap = new HashMap<>(this.capacity, 1f);
        nodeMap = new HashMap<>(this.capacity, 1f);
    }
    
    public int get(int key) {
        if(nodeMap.containsKey(key)) increase(key);
        return valueMap.getOrDefault(key, -1);
    }
    
    private void increase(int key){
        Node node = nodeMap.get(key);
        node.keys.remove(key);
        if(node.next == null) node.next = new Node(node, null, node.count + 1, key);
        else if(node.count + 1 == node.next.count) node.next.keys.add(key);
        else node.next = node.next.pre = new Node(node, node.next, node.count + 1, key);
        nodeMap.put(key, node.next);
        if(node.keys.isEmpty()) remove(node);
    }
    
    private void remove(Node node){
        if(node == head) head = node.next;
        else node.pre.next = node.next;
        if(node.next != null) node.next.pre = node.pre;
    }
    
    public void put(int key, int value) {
        if(0 == this.capacity) return;
        if(valueMap.put(key,value) != null) increase(key);
        else{
            if(nodeMap.size() == this.capacity) remove();
            add(key);
        }
    }
    
    private void add(int key){
        if(head == null) head = new Node(null,null,1, key);
        else if(head.count == 1) head.keys.add(key);
        else head = head.pre = new Node(null, head, 1, key);
        nodeMap.put(key, head);
    }
    
    private void remove(){
        if(head == null) return;
        int oldest = head.keys.iterator().next();
        head.keys.remove(oldest);
        if(head.keys.isEmpty()) remove(head);
        nodeMap.remove(oldest);
        valueMap.remove(oldest);
    }
    
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
