
//a palindrome can be expanded from its center, and there are only 2n - 12nâˆ’1 such centers.The center of a palindrome can be in between two letters. Such palindromes have even number of letters.
//For every character i in the string, we can get a palindrome if we take i as the center point. Among all of those palindorme, we can find the longest one.
//Since we are required to return the palindrome string, we have to index the start point and end point of the palindrome.

public class Solution {
    public String longestPalindrome(String s) {
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}
}

//Time complexity : O(n^2). Since expanding a palindrome around its center could take O(n)O(n) time

//Space complexity : O(1)



