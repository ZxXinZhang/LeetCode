//The problem can be solved with a hashtable that keeps track of the keys and its values in the double linked list. One inmportant property about double linked list is that the node can remove itself without other reference. In addition, it takes constant time to add and remove nodes from the head or tail.

//One particularity about the double linked list that I implemented is that I create a pseudo head and tail to mark the boundary, so that we don't need to check the NULL node during the update. This makes the code more concise and clean, and also it is good for the performance as well.
public class LRUCache {
    
    class DLinkedNode{
        int key;
        int val;
        DLinkedNode pre ;
        DLinkedNode post;
    }
    
    private void addNode(DLinkedNode node){
        node.pre = head;
        node.post = head.post;
        head.post.pre = node;
        head.post = node;
        
    }
    private void removeNode(DLinkedNode node){
        
        node.pre.post = node.post;
        node.post.pre = node.pre;
    }
  
    private void moveToHead(DLinkedNode node){
        this.removeNode(node);
        this.addNode(node);
    }
    
    private DLinkedNode poptail(){
        DLinkedNode res = tail.pre;
        this.removeNode(res);
        return res;
    }
    
    int count;
    int capacity;
    DLinkedNode head;
    DLinkedNode tail;
    HashMap<Integer, DLinkedNode> cache = new HashMap<Integer, DLinkedNode>();
    public LRUCache(int capacity) {
        this.count = 0;
        this.capacity = capacity;
        head = new DLinkedNode();
        head.pre = null;
        tail = new DLinkedNode();
        tail.post = null;
        head.post = tail;
        tail.pre = head;
    }
    
    public int get(int key) {
        DLinkedNode node = cache.get(key);
        if(node == null) return -1;
        else{
            this.moveToHead(node);
            int value = node.val;
            return value;
        } 
    }
  
    
    public void set(int key, int value) {
        DLinkedNode node = cache.get(key);
        if(node == null){
            DLinkedNode newnode = new DLinkedNode();
            newnode.key = key;
            newnode.val = value; 
            if(count >= capacity){
                DLinkedNode tail = this.poptail();
                this.cache.remove(tail.key);
                count--;
            }
            this.cache.put(key, newnode);
            this.addNode(newnode);
            count++;
        }else{
            node.val = value;
            this.moveToHead(node);
        }
    }
    
    
  
}


/*
//LinkeHashMap
import java.util.LinkedHashMap;

public class LRUCache {
    
    private Map<Integer, Integer> map;
    
    public LRUCache(int capacity) {
        map = new LinkedCappedHashMap<>(capacity);
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) { return -1; }
        return map.get(key);
    }
    
    public void set(int key, int value) {
        map.put(key,value);
    }

    private static class LinkedCappedHashMap<K,V> extends LinkedHashMap<K,V> {
        
        int maximumCapacity;
        
        LinkedCappedHashMap(int maximumCapacity) {
            super(16, 0.75f, true);
            this.maximumCapacity = maximumCapacity;
        }
        
        protected boolean removeEldestEntry(Map.Entry eldest) {
            return size() > maximumCapacity;
        }
    }
}
*/
