/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//The idea is to compare the predecessors and successors of the closest node to the target, we can use two stacks to track the predecessors and successors, then like what we do in merge sort, we compare and pick the closest one to the target and put it to the result list.

//As we know, inorder traversal gives us sorted predecessors, whereas reverse-inorder traversal gives us sorted successors.
//1 3 5 6 7 target=4.9 k = 2, return 5,6
//stack1: 1,3 stack2: 7,6,5

public class Solution {
public List<Integer> closestKValues(TreeNode root, double target, int k) {
    List<Integer> res = new ArrayList<Integer>();
    if(root == null) return res;
    Deque<Integer> stack1 = new LinkedList<Integer>();// predecessors
    Deque<Integer> stack2 = new LinkedList<Integer>();// successors
    inorder(root, target, stack1, false);
    inorder(root, target, stack2, true);
    while(k-- > 0){
        if(stack1.isEmpty()){
            res.add(stack2.pollLast());
        }
        else if(stack2.isEmpty()){
            res.add(stack1.pollLast());
        }
        else if(Math.abs(stack1.peekLast() - target) < Math.abs(stack2.peekLast() - target) ){
            res.add(stack1.pollLast());
        }else{
            res.add(stack2.pollLast());
        }
    }
    return res;

}

private void inorder(TreeNode root, double target, Deque<Integer> stack, boolean reverse){
    if(root == null) return;
    inorder(reverse ? root.right : root.left, target, stack , reverse);
    if((reverse && root.val <= target) || (!reverse && root.val > target)){
        return;
    }
    stack.offerLast(root.val);
    inorder(reverse ? root.left : root.right, target, stack, reverse);
    
}


}
