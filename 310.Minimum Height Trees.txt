//Two O(n) solutions.  based on the longest path.
//It is easy to see that the root of an MHT has to be the middle point (or two middle points) of the longest path of the tree.
//Though multiple longest paths can appear in an unrooted tree, they must share the same middle point(s).

//Computing the longest path of a unrooted tree can be done, in O(n) time, by tree dp, or simply 2 tree traversals (dfs or bfs).

//Randomly select a node x as the root, do a dfs/bfs to find the node y that has the longest distance from x.
//Then y must be one of the endpoints on some longest path.
//Let y the new root, and do another dfs/bfs. Find the node z that has the longest distance from y.
//Now, the path from y to z is the longest one, and thus its middle point(s) is the answer. 
//And we need to find the path, so the pre[] array is to store the path.
public class Solution {
    int n;
    ArrayList<Integer>[] e;
    
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new ArrayList<Integer>();
        if(n <= 0){
            return res;
        } 
        this.n = n;
        e = new ArrayList[n];
        for(int i = 0; i < n; i++){
            e[i] = new ArrayList<Integer>();
        }
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            e[u].add(v);
            e[v].add(u);
        }
        int[] pre = new int[n];
        int[] dis1 = new int[n];
        int[] dis2 = new int[n];
        bfs(0, dis1, pre);
        int u = 0;
        for(int i = 0; i < n; i++){
            if(dis1[i] > dis1[u]) u = i;
        }
        bfs(u, dis2, pre);
        int v = 0;
        for(int i = 0; i < n; i++){
            if(dis2[i] > dis2[v]) v = i;
        }
        List<Integer> path = new ArrayList<Integer>();
        while(v != -1){
            path.add(v);
            v = pre[v];
        } 
        
        int len = path.size();
        if(len % 2 == 1){
            res.add(path.get(len / 2 ));
        }  
        else if(len % 2 == 0) {
            res.add(path.get(len / 2 - 1));
            res.add(path.get(len / 2));
            
        }
        return res;
        
    }
    
    private void bfs(int start, int[] dis, int[] pre){
        Queue<Integer> queue = new LinkedList<Integer>();
        boolean[] visited = new boolean[n];
        queue.offer(start);
        dis[start] = 0;
        pre[start] = -1;
        visited[start] = true;
        while(!queue.isEmpty()){
            int u = queue.poll();
            for(int v : e[u]){
                if(!visited[v]){
                    dis[v] = dis[u] + 1;
                    pre[v] = u;
                    visited[v] = true;
                    queue.offer(v);
                }
            }
            
        }
    }
    
}

//O(n)
