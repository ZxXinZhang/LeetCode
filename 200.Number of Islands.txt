//First, we build the graph. Then just like do dfs, for every position 1. To mark nodes we visited, we just need turn 1 to 0.
//The times we run dfs is the number of islands.
public class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        if(grid[0] == null || grid[0].length == 0) return 0;
        
        int col = grid[0].length;
        int row = grid.length;
        int count = 0;
        for(int i = 0; i < row; i ++){
            for(int j = 0; j < col; j++){
               if( grid[i][j] == '1'){
                   remove(i,j,grid,row,col);
                   count ++;
               }
            }
        }
        return count;
    }
    
    private void remove(int i, int j, char[][] grid,int row, int col){
        grid[i][j] = '0';
        int m,n;
        for(m = -1; m <= 1;  m++){
            for(n = -1; n <= 1; n++){
                if(isvalid(m,n,i,j,row,col) && grid[m+i][n+j] == '1')
                    remove(m+i,n+j,grid,row,col);
            }
        }
    }
    
    private boolean isvalid(int m, int n, int i, int j, int row, int col){
        return Math.abs(m)!= Math.abs(n) && m+i >= 0 && m+i < row && n+j >= 0 && n+j < col ;
    }
}
