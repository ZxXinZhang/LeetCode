
//If it is a tree, it contains all nodes and does not have a circle. So we can build the graph first. Then check the two conditions.

public class Solution {
    public boolean validTree(int n, int[][] edges) {
        List<List<Integer>> adjList = new ArrayList<List<Integer>>(n); 
        for(int i = 0; i < n; i++){
            adjList.add(i, new ArrayList<Integer>());
        }
        for(int i = 0; i < edges.length; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            adjList.get(u).add(v);
            adjList.get(v).add(u);
        }
        boolean[] visited = new boolean[n];
        if(hasCircle(adjList,0,visited,-1)){
            return false;
        }
        for(int i = 0; i < n; i++){
            if(visited[i] == false)
                return false;
        }
        return true;
        
    }
    
    private boolean hasCircle(List<List<Integer>> adjList, int u, boolean[] visited, int parent){
        visited[u] = true;
        for(int i = 0; i < adjList.get(u).size(); i++){
            int v = adjList.get(u).get(i);
            if((visited[v] && v != parent)|| !visited[v] && hasCircle(adjList, v, visited, u)){
                return true;
            }
        }
        return false;
    }
}
//O(N2)



/*
//Base on union-find
public class Solution {
    public boolean validTree(int n, int[][] edges) {
        // initialize n isolated islands
        int[] nums = new int[n];
        Arrays.fill(nums, -1);
        
        // perform union find
        for (int i = 0; i < edges.length; i++) {
            int x = find(nums, edges[i][0]);
            int y = find(nums, edges[i][1]);
            
            // if two vertices happen to be in the same set
            // then there's a cycle
            if (x == y) return false;
            
            // union
            nums[x] = y;
        }
        
        return edges.length == n - 1;
    }
    
    int find(int nums[], int i) {
        if (nums[i] == -1) return i;
        return find(nums, nums[i]);
    }
}
//O(n2)
*/

