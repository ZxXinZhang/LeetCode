//Trie tree.
//First, define TrieNode and trie tree. The insert funxtion is used to build tree by inserting every word in words.
//start from every cell and try to build a word in the dictionaryby dfs. 
//We need to do pruning when current character is not in any word. That is what satrtwith function does, but startwith is not enough. Since it is possible that we find "ab" in words, but in the dictionary, it is "abc", we should compare the lengths of the two string, which is what the search function does.

public class Solution {
    Set<String> res = new HashSet<String>();
    public List<String> findWords(char[][] board, String[] words) {
        Trie trie = new Trie();
        for(String word : words){
            trie.insert(word);
        }
        
        int m = board.length;
        int n = board[0].length;
        
        boolean[][] visited = new boolean[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                dfs(board, i, j, visited, "", trie);
            }
        }
        
        return new ArrayList<String>(res);
    }
    
    private void dfs(char[][] board, int i, int j, boolean[][] visited, String str, Trie trie){
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length) return;
        if(visited[i][j]) return;
        str = str + board[i][j];
        if(!trie.startWith(str)) return;
        if(trie.search(str)){
            res.add(str);
        }
        visited[i][j] = true;
        dfs(board, i + 1, j, visited, str, trie);
        dfs(board, i - 1, j, visited, str, trie);
        dfs(board, i, j + 1, visited, str, trie);
        dfs(board, i, j - 1, visited, str, trie);
        visited[i][j] = false;
    }
    
    class TrieNode{
        public TrieNode[] children;
        public String item = "";
        public TrieNode(){
            children = new TrieNode[26];
            item = "";
        }
    }
    
    class Trie{
        private TrieNode root;
        public Trie(){
            root = new TrieNode();
        }
        
        public void insert(String word){
            TrieNode node = root;
            for(char c : word.toCharArray()){
                int idx = c - 'a';
                if(node.children[idx] == null){
                    node.children[idx] = new TrieNode();
                }
                node = node.children[idx];
            }
            node.item = word;
        }
        
        public boolean search(String word){
            TrieNode node = root;
            for(char c : word.toCharArray()){
                int idx = c - 'a';
                if(node.children[idx] == null){
                    return false;
                }
                node = node.children[idx];
            }
            return word.equals(node.item);
        }
        
        public boolean startWith(String word){
            TrieNode node = root;
            for(char c : word.toCharArray()){
                int idx = c - 'a';
                if(node.children[idx] == null){
                    return false;
                }
                node = node.children[idx];
            }
            return true;
        }
        
    }
}


