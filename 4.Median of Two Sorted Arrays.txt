//Put left_A and left_B into one set, and put right_A and right_B into another set. Let's name them left_part and right_part 
//then we divide all elements in {A, B} into two parts with equal length, and one part is always greater than the other. Then median = (max(left_part) + min(right_part))/2.
//(1) i + j == m - i + n - j (or: m - i + n - j + 1)
//    if n >= m, we just need to set: i = 0 ~ m, j = (m + n + 1)/2 - i
//(2) B[j-1] <= A[i] and A[i-1] <= B[j]
public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if(m > n) return findMedianSortedArrays(nums2,nums1);
        int imin = 0;
        int imax = m;
        int max_of_left;
        int min_of_right;
        int i = (imin + imax) / 2, j = (m + n + 1) / 2 - i;
        while(imin <= imax){
            i = (imin + imax) / 2;
            j = (m + n + 1) / 2 - i;
            if(i > 0 && nums1[i - 1] > nums2[j]){
                imax = i - 1;
            }else if(i < m && nums2[j - 1] > nums1[i]){
                imin = i + 1;
            }else break;
        }
        if(i == 0) max_of_left = nums2[j - 1];
        else if(j == 0) max_of_left = nums1[i - 1];
        else max_of_left = Math.max(nums1[i - 1],nums2[j - 1]);
        if((m + n) % 2 == 1) return max_of_left;
        
        if( i == m) min_of_right = nums2[j];
        else if(j == n) min_of_right = nums1[i];
        else min_of_right = Math.min(nums1[i], nums2[j]);
        
        return (max_of_left + min_of_right) / 2.0;

    }
}
//O(log (m+n))
