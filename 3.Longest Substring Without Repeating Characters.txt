//If we know that the charset is rather small, we can replace the Map with an integer array as direct access table
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int index[] = new int[128];
        int i = 0, j = 0, ans = 0;
        for(i=0, j=0; j<n; j++)
        {
            i = Math.max(index[s.charAt(j)], i);
            ans = Math.max(ans, j-i+1);
            index[s.charAt(j)]=j+1;
        }
        return ans;
    }
}
//Complexity Analysis
//Time complexity : O(n)O(n). Index jj will iterate nn times.
//Space complexity (HashMap) : O(min(m, n))O(min(m,n)). Same as the previous approach.
//Space complexity (Table): O(m)O(m). mm is the size of the charset.

/*
//We can take every character in the string as starting character, then find according longest substring without repeating characters.
//So we need a array named length[] to store all possible answers. The max value is the final result.
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        char ch[] = s.toCharArray();
        String curr = new String();
        if(ch.length<1)
        {return 0;}
        else{
        int length[] = new int[ch.length];
        length[ch.length-1]=1;
        for(int m=0; m<ch.length;m++)
        {   
            int count = 1;
            curr = String.valueOf(ch[m]);
            //System.out.println(m+"  "+curr);
            for(int n = m+1; n < ch.length; n++)
            {
                if(curr.indexOf(String.valueOf(ch[n]))<0)
                {
                    curr = curr+String.valueOf(ch[n]);
                    count++;
                    length[m] = count;
                }
                else
                {
                     length[m] = count;
                     break;
                }
            }
        }
         for(int a=0;a<length.length;a++)
         {System.out.println("shuzu"+length[a]);}
         int answer = max(length);
         return answer;
  }
  }
    
    public int max(int c[]){
        int z; 
        z=c[0];
        for(int m=0;m<c.length;m++)
        {
            if(z<c[m]){
                z=c[m];
                for(int n=m+1;n<c.length;n++)
                {
                 if(z<c[n])
                 {
                    z=c[n];
                 }
                }
            }
        }
        return z;
    }
}
*/

/* sliding window using HashMap.
// We use HashSet to store the characters in current window [i, j)[i,j) (j = ij=i initially). Then we slide the index jj to the right. If it is not in the HashSet, we slide jj further. Doing so until s[j] is already in the HashSet. At this point, we found the maximum size of substrings without duplicate characters start with index ii. If we do this for all ii, we get our answer.

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
// Time complexity : O(2n) = O(n)O(2n)=O(n). In the worst case each character will be visited twice by ii and jj.

//Space complexity : O(min(m, n))O(min(m,n)). Same as the previous approach. We need O(k)O(k) space for the sliding window, where kk is the size of the Set. The size of the Set is upper bounded by the size of the string nn and the size of the charset/alphabet mm.
*/


/* Sliding Window Optimized
//The above solution requires at most 2n steps. In fact, it could be optimized to require only n steps. Instead of using a set to tell if a character exists or not, we could define a mapping of the characters to its index. Then we can skip the characters immediately when we found a repeated character.

//The reason is that if s[j] have a duplicate in the range [i,j) with index j',we don't need to increase ii little by little.
Java (Using HashMap).We can skip all the elements in the range [i, j'] and let i to be j' + 1 directly.

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}

 //If we know that the charset is rather small, we can replace the Map with an integer array as direct access table.
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        int[] index = new int[128]; // current index of character
        // try to extend the range [i, j]
         for (int j = 0, i = 0; j < n; j++) {
            i = Math.max(index[s.charAt(j)], i);
            ans = Math.max(ans, j - i + 1);
            index[s.charAt(j)] = j + 1;
        }    
        return ans;
    }
}

*/




