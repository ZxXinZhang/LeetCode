//Using binary indexed tree. 
//nums is used to store the last binary indexed tree, and the tree is to store the current binary indexed tree after updating.
//The first time, two for loop is to build the binary indexed tree of the original matrix.
//To sum a submatrix, we can use the sum of one big matrix to minus the sums of three small matrixes. 
public class NumMatrix {
    
    int m;
    int n;
    int[][] tree;
    int[][] nums;
    
    public NumMatrix(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0) return;
        m = matrix.length;
        n = matrix[0].length;
        tree = new int[m + 1][ n + 1];
        nums = new int[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0 ; j < n ; j++){
                update(i, j, matrix[i][j]);
            }
        }
    }

    public void update(int row, int col, int val) {
        if(m == 0 || n == 0) return;
        int delta = val - nums[row][col];
        nums[row][col] = val;
        for(int i = row + 1; i <= m; i += i & (-i)){
            for(int j = col + 1; j <= n ; j += j & (-j)){
                tree[i][j] += delta;
            }
        }
        
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        if(m == 0 || n == 0 ) return 0;
        return sum(row2 + 1, col2 + 1) + sum(row1, col1) - sum(row2 + 1, col1) - sum(row1, col2 + 1);
    }
    
    private int sum(int row , int col){
        int sum = 0;
        for(int i = row; i > 0; i -= i & (-i)){
            for(int j = col; j > 0; j -= j & (-j)){
                sum += tree[i][j];
            }
        }
        return sum;
    }
}


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix = new NumMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.update(1, 1, 10);
// numMatrix.sumRegion(1, 2, 3, 4);
