//Create a new class cell, whose member variables includes its coordinate and height.
//It is obviously that cells on boundries cannot store water.
// from the borders, pick the shortest cell visited and check its neighbors:
        // if the neighbor is shorter, collect the water it can trap and update its height as its height plus the water trapped
       // add all its neighbors to the queue.

public class Solution {
    class Cell{
        int row;
        int col;
        int height;
        public Cell(int row, int col, int height){
            this.row = row;
            this.col = col;
            this.height = height;
        }
    }
    
    public int trapRainWater(int[][] heightMap) {
        if(heightMap == null || heightMap.length == 0 || heightMap[0].length == 0){
            return 0;
        }
        int res = 0;
        int row = heightMap.length;
        int col = heightMap[0].length;
        PriorityQueue<Cell> heap = new PriorityQueue<Cell>(1, new Comparator<Cell>(){
            public int compare(Cell c1, Cell c2){
                return c1.height - c2.height;
            }
        });
        boolean[][] visited = new boolean[row][col];
        for(int i = 0; i < row; i++){
            visited[i][0] = true;
            visited[i][col - 1] = true;
            heap.offer(new Cell(i,0,heightMap[i][0]));
            heap.offer(new Cell(i,col - 1,heightMap[i][col - 1]));
        }
        for(int i = 0; i < col; i++){
            visited[0][i] = true;
            visited[row - 1][i] = true;
            heap.offer(new Cell(0,i,heightMap[0][i]));
            heap.offer(new Cell(row - 1, i,heightMap[row - 1][i]));
        }
        int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        while(!heap.isEmpty()){ 
            Cell cell = heap.poll();
            for(int[] dir : dirs){ 
                int x = cell.row + dir[0];
                int y = cell.col + dir[1];
                if(x < row && x >= 0 && y >= 0 && y < col && !visited[x][y]){
                    visited[x][y] = true;
                    res += Math.max(0, cell.height - heightMap[x][y]);
                    heap.offer(new Cell(x, y, Math.max(cell.height, heightMap[x][y])));
                }
                
            }
        }
        
       return res;
    }
}






