/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/*
//recursion 
public class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) 
            return 0;
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}
*/


//BFS
public class Solution {
    public int maxDepth(TreeNode root) {    
        if(root == null) return 0;
        Deque<TreeNode> que = new LinkedList<TreeNode>();
        que.offerLast(root);
        int count = 0;
        while(!que.isEmpty()){
            int size = que.size();
            for(int i = 0; i < size; i++){
                TreeNode node = que.pollFirst();
                
                if(node.left != null){
                    que.offerLast(node.left);
                }
                if(node.right != null){
                    que.offerLast(node.right);
                }
            }
            count ++;
        }
        return count;
    }
}
//O(m+n)
